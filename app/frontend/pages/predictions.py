import streamlit as st
import requests

st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ - Bank Churn",
    page_icon="üîÆ",
    layout="wide"
)

API_BASE_URL = "http://localhost:8000"

def load_css():
    try:
        with open("assets/styles/eda.css", "r", encoding='utf-8') as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
        
        with open("assets/styles/predictions.css", "r", encoding='utf-8') as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)
            
    except FileNotFoundError as e:
        st.warning(f"–§–∞–π–ª —Å—Ç–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")

load_css()

def check_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    try:
        response = requests.get(f"{API_BASE_URL}/", timeout=5)
        return response.status_code == 200
    except:
        return False

def predict_churn(customer_data: dict) -> dict:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ FastAPI –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    try:
        response = requests.post(
            f"{API_BASE_URL}/predict",
            json=customer_data,
            timeout=10
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            return {
                'success': False,
                'error': f"API –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}"
            }
            
    except requests.exceptions.ConnectionError:
        return {
            'success': False,
            'error': "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω."
        }
    except requests.exceptions.Timeout:
        return {
            'success': False, 
            'error': "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        }
    except Exception as e:
        return {
            'success': False,
            'error': f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        }

st.markdown("""
<div class="eda-container">
    <h1 class="eda-title">üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞</h1>
</div>
""", unsafe_allow_html=True)

st.sidebar.markdown("""
<div class="sidebar-nav">
    <h3 style="margin-bottom: 1rem; border-bottom: 1px solid #2a2f38; padding-bottom: 0.5rem;">üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
""", unsafe_allow_html=True)

api_status = check_api_health()
if api_status:
    st.sidebar.success("‚úÖ API –∞–∫—Ç–∏–≤–Ω–æ")
else:
    st.sidebar.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    st.sidebar.info("""
    **–î–ª—è –∑–∞–ø—É—Å–∫–∞ API –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:**
    ```bash
    cd app/api
    poetry run uvicorn main:app --reload
    ```
    """)

st.sidebar.markdown("</div>", unsafe_allow_html=True)

st.sidebar.markdown("""
<div class="sidebar-nav">
    <h3 style="margin-bottom: 1rem; border-bottom: 1px solid #2a2f38; padding-bottom: 0.5rem;">üìã –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞</h3>
""", unsafe_allow_html=True)

st.sidebar.subheader("–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è")
credit_score = st.sidebar.slider("–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", 300, 850, 650, 
                               help="–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥ –æ—Ç 300 –¥–æ 850")
geography = st.sidebar.selectbox("–°—Ç—Ä–∞–Ω–∞", ["France", "Germany", "Spain"], 
                               help="–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")
gender = st.sidebar.selectbox("–ü–æ–ª", ["Female", "Male"])
age = st.sidebar.slider("–í–æ–∑—Ä–∞—Å—Ç", 18, 100, 45)
tenure = st.sidebar.slider("–í—Ä–µ–º—è –≤ –±–∞–Ω–∫–µ (–ª–µ—Ç)", 0, 10, 3)

st.sidebar.subheader("–§–∏–Ω–∞–Ω—Å—ã")
balance = st.sidebar.number_input("–ë–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç–µ (‚Ç¨)", 0, 250000, 120000, 
                                help="–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—á–µ—Ç–µ")
num_products = st.sidebar.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", [1, 2, 3, 4],
                                  help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞")
has_credit_card = st.sidebar.checkbox("–ï—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", True)
is_active = st.sidebar.checkbox("–ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç", False)
salary = st.sidebar.number_input("–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (‚Ç¨)", 0, 200000, 60000)

predict_btn = st.sidebar.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞", 
                               type="primary", 
                               use_container_width=True,
                               disabled=not api_status)

st.sidebar.markdown("</div>", unsafe_allow_html=True)

if predict_btn:
    with st.spinner("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é ML –º–æ–¥–µ–ª–∏..."):
        customer_data = {
            "CreditScore": credit_score,
            "Geography": geography,
            "Gender": gender,
            "Age": age,
            "Tenure": tenure,
            "Balance": float(balance),
            "NumOfProducts": num_products,
            "HasCrCard": has_credit_card,
            "IsActiveMember": is_active,
            "EstimatedSalary": float(salary)
        }
        
        result = predict_churn(customer_data)
        
        if result['success']:
            st.markdown('<h2 class="eda-subtitle" style="margin:10px">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h2>', unsafe_allow_html=True)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(f"""
                <div class="prediction-metric">
                    <h3 style="color: #b8860b; margin-bottom: 1rem;">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞</h3>
                    <div style="font-size: 3rem; font-weight: bold; color: #ff4d4f;">
                        {result['churn_probability']:.1%}
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                st.markdown(f"""
                <div class="prediction-metric">
                    <h3 style="color: #b8860b; margin-bottom: 1rem;">–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞</h3>
                    <div style="font-size: 2rem; font-weight: bold; color: #5294e2;">
                        {result['risk_level']}
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                st.markdown(f"""
                <div class="prediction-metric">
                    <h3 style="color: #b8860b; margin-bottom: 1rem;">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</h3>
                    <div style="font-size: 1.2rem; font-weight: bold; color: #2ebd85;">
                        {result['recommended_action']}
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
            prob = result['churn_probability']
            if prob > 0.6:
                risk_class = "risk-critical"
                risk_text = "üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ - –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
            elif prob > 0.4:
                risk_class = "risk-high"
                risk_text = "üü° –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ"
            elif prob > 0.2:
                risk_class = "risk-medium"
                risk_text = "üü† –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ - –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            else:
                risk_class = "risk-low"
                risk_text = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
            
            st.markdown(f'<div class="{risk_class}">{risk_text}</div>', unsafe_allow_html=True)
            
            st.markdown("""
            <div class="eda-card">
                <h3 style="color: #b8860b; margin-bottom: 1rem;">üîç –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞</h3>
            """, unsafe_allow_html=True)
            
            if result['risk_factors']:
                for factor in result['risk_factors']:
                    st.markdown(f'<div class="factor-item">‚Ä¢ {factor}</div>', unsafe_allow_html=True)
            else:
                st.info("‚úÖ –ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞")
            
            st.markdown('</div>', unsafe_allow_html=True)
            
            st.markdown("""
            <div class="eda-card">
                <h3 style="color: #b8860b; margin-bottom: 1rem;">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–¥–µ—Ä–∂–∞–Ω–∏—é</h3>
            """, unsafe_allow_html=True)
            
            for recommendation in result.get('recommendations', []):
                st.markdown(f'<div class="recommendation-item">‚Ä¢ {recommendation}</div>', unsafe_allow_html=True)
            
            st.markdown('</div>', unsafe_allow_html=True)
            
            if result.get('key_metrics'):
                st.markdown("""
                <div class="eda-card">
                    <h3 style="color: #b8860b; margin-bottom: 1rem;">üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞</h3>
                """, unsafe_allow_html=True)
                
                for metric, value in result['key_metrics'].items():
                    st.markdown(f'<div class="factor-item"><strong>{metric}:</strong> {value}</div>', unsafe_allow_html=True)
                
                st.markdown('</div>', unsafe_allow_html=True)
            
            with st.expander("üìã –î–µ—Ç–∞–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                st.json(customer_data)
                
        else:
            st.error(f"‚ùå {result.get('error', 'Unknown error')}")

else:
    if not api_status:
        st.error("""
        ## ‚ùå FastAPI —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        
        **–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫–µ–Ω–¥:**
        
        ```bash
        # –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:
        cd app/api
        poetry run uvicorn main:app --reload
        ```
        
        –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        """)
    else:
        st.markdown("""
        <div class="customer-profile">
            <h3 style="color: #b8860b; text-align: center;">üëà –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞"</h3>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown('<h2 class="eda-subtitle" style="margin-bottom:10px;">–ü—Ä–∏–º–µ—Ä—ã —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π</h2>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="conclusion-card conclusion-high-risk">
            <h4>üö® –ö–ª–∏–µ–Ω—Ç –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞</h4>
            <ul>
                <li>1 –ø—Ä–æ–¥—É–∫—Ç –±–∞–Ω–∫–∞</li>
                <li>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç</li>
                <li>–í–æ–∑—Ä–∞—Å—Ç 45+ –ª–µ—Ç</li>
                <li>–ò–∑ –ì–µ—Ä–º–∞–Ω–∏–∏</li>
                <li>–ú—É–∂—á–∏–Ω–∞</li>
            </ul>
            <p style="color: #ff4d4f; font-weight: bold; margin-top: 1rem;">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞: 27-42%</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="conclusion-card conclusion-low-risk">
            <h4>üü¢ –ö–ª–∏–µ–Ω—Ç –Ω–∏–∑–∫–æ–≥–æ —Ä–∏—Å–∫–∞</h4>
            <ul>
                <li>3+ –ø—Ä–æ–¥—É–∫—Ç–∞ –±–∞–Ω–∫–∞</li>
                <li>–ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç</li>
                <li>–ú–æ–ª–æ–¥–æ–π –≤–æ–∑—Ä–∞—Å—Ç (18-35)</li>
                <li>–ò–∑ –§—Ä–∞–Ω—Ü–∏–∏/–ò—Å–ø–∞–Ω–∏–∏</li>
                <li>–ñ–µ–Ω—â–∏–Ω–∞</li>
            </ul>
            <p style="color: #2ebd85; font-weight: bold; margin-top: 1rem;">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞: 1-5%</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="eda-card">
        <h3 style="color: #b8860b;">–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ?</h3>
        <div style="color: #a0a5b0;">
            <p>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é <strong>CatBoost –º–æ–¥–µ–ª–∏</strong> —á–µ—Ä–µ–∑ <strong>FastAPI –±—ç–∫–µ–Ω–¥</strong>:</p>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin-top: 1rem;">
                <div style="text-align: center;">
                    <div style="font-size: 2rem;">üöÄ</div>
                    <strong>FastAPI –±—ç–∫–µ–Ω–¥</strong>
                    <p>REST API –Ω–∞ Python</p>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 2rem;">ü§ñ</div>
                    <strong>CatBoost –º–æ–¥–µ–ª—å</strong>
                    <p>–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥</p>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 2rem;">üìä</div>
                    <strong>ROC-AUC: 0.872</strong>
                    <p>–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</p>
                </div>
                <div style="text-align: center;">
                    <div style="font-size: 2rem;">‚ö°</div>
                    <strong>Real-time</strong>
                    <p>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</p>
                </div>
            </div>
            <div style="margin-top: 1.5rem; padding: 1rem; background: rgba(37, 42, 50, 0.6); border-radius: 8px;">
                <strong>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã:</strong>
                <p>Streamlit Frontend ‚Üí FastAPI Backend ‚Üí CatBoost Model ‚Üí Predictions</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

st.markdown("---")
st.markdown("""
<div class="footer">
    <p style="text-align: center; color: #6c727d; margin: 0;">
        üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ FastAPI –±—ç–∫–µ–Ω–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CatBoost –º–æ–¥–µ–ª–∏
    </p>
</div>
""", unsafe_allow_html=True)
